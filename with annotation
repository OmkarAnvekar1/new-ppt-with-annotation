import cv2
import os
import numpy as np
from cvzone.HandTrackingModule import HandDetector

# Screen resolution
width, height = 200, 400

# Define the folder path for the slides
folderPath = r"C:\Users\omkar\Downloads\ppt final part\MINOR 1 PPT"
cap = cv2.VideoCapture(0)
cap.set(3, width)
cap.set(4, height)

pathImages = sorted(os.listdir(folderPath), key=len)
print(pathImages)

imgNumber = 0
hs, ws = int(height * 0.3), int(width * 0.3)  # Slide size
gestureThreshold = 100
buttonPressed = False
buttonCounter = 0
buttonDelay = 30  # Speed of switching between slides
annotations = [[]]  # List for storing annotations
annotationNumber = 0
annotationStart = False

# Hand detector
detector = HandDetector(detectionCon=0.8, maxHands=1)

while True:
    success, img = cap.read()
    img = cv2.flip(img, 1)  # Horizontal flip
    pathFullImage = os.path.join(folderPath, pathImages[imgNumber])
    imgCurrent = cv2.imread(pathFullImage)
    
    # Detect hands
    hands, img = detector.findHands(img)
    
    # Draw gesture threshold line
    cv2.line(img, (0, gestureThreshold), (width, gestureThreshold), (0, 255, 0), 5)
    
    if hands and not buttonPressed:
        hand = hands[0]
        fingers = detector.fingersUp(hand)
        
        cx, cy = hand['center']
        lmList = hand['lmList']  # Landmark list
        
        # Adjust these ranges according to your webcam feed dimensions and required slide dimensions
#        xVal = int(np.interp(lmList[8][0], [0, width], [0, imgCurrent.shape[0]]))
#        yVal = int(np.interp(lmList[8][1], [100, height-100], [0, imgCurrent.shape[0]]))
#       indexFinger = (xVal, yVal)
        
        xVal = int(np.interp(lmList[8][0], [0, width], [0, imgCurrent.shape[1]]))
        yVal = int(np.interp(lmList[8][1], [150, height-150], [0, imgCurrent.shape[0]]))
        indexFinger = (xVal, yVal)

        
        
        
        
        
        if cy <= gestureThreshold:
            annotationStart = False
            # Gesture 1 - Left
            if fingers == [1, 0, 0, 0, 0]:
                annotationStart = False
                print("left")
                if imgNumber > 0:
                    buttonPressed = True
                    annotations = [[]]
                    annotationNumber = 0
                    annotationStart = False
                    imgNumber -= 1
                
            # Gesture 2 - Right
            if fingers == [0, 0, 0, 0, 1]:
                annotationStart = False
                print("right")
                if imgNumber < len(pathImages) - 1:
                    buttonPressed = True
                    annotations = [[]]
                    annotationNumber = 0
                    imgNumber += 1
        
        # Gesture 3 - Add pointer
        if fingers == [0, 1, 1, 0, 0]:
            cv2.circle(imgCurrent, indexFinger, 12, (0, 0, 255), cv2.FILLED)
            annotationStart = False
        
        # Gesture 4 - Draw
        if fingers == [0, 1, 0, 0, 0]:
            if not annotationStart:
                annotationStart = True
                annotationNumber += 1
                annotations.append([])
            cv2.circle(imgCurrent, indexFinger, 12, (0, 0, 255), cv2.FILLED)
            annotations[annotationNumber].append(indexFinger)
        else:
            annotationStart = False
        
        # Gesture 5 - Eraser
        if fingers == [0, 1, 1, 1, 0]:
            if annotations:
                annotations.pop(-1)
                annotationNumber -= 1
                buttonPressed = True
    
    else:
        annotationStart = False
    
    # Button pressed iterations
    if buttonPressed:
        buttonCounter += 1
        if buttonCounter > buttonDelay:
            buttonCounter = 0
            buttonPressed = False
    
    for i in range(len(annotations)):
        for j in range(len(annotations[i])):
            if j != 0:
                cv2.line(imgCurrent, annotations[i][j - 1], annotations[i][j], (247,255,0), 3)
    
    # Display webcam on slides
    imgSmall = cv2.resize(img, (ws, hs))
    h, w, _ = imgCurrent.shape
    imgCurrent[0:hs, w - ws:w] = imgSmall
    
    cv2.imshow("Image", img)
    cv2.imshow("Slides", imgCurrent)
    
    key = cv2.waitKey(1)
    if key == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
